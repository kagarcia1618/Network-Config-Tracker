{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Network config tracker is a tool that monitors the configuration changes of your network devices using a gitlab repository. This tool requires integration to the following applications:</p> <ul> <li>Gitlab which is used for storing the network devices configuration and to monitor the configuration changes.</li> <li>NetBox which is used for maintaining the list of network devices to be monitored for configuration changes.</li> </ul>"},{"location":"#support-matrix","title":"Support Matrix","text":"<p>List of supported network device platforms and NetBox parameter configuration.</p> Parameters Cisco IOS Cisco IOS-XR Cisco NXOS Juniper JunOS NetBox Platform Cisco IOS Cisco IOS-XR Cisco NXOS Juniper JunOS NetBox Status Active Active Active Active NetBox Primary IPv4 <code>True</code> <code>True</code> <code>True</code> <code>True</code> Login Method SSH SSH SSH | NX-API SSH <p>Tested working on:</p> Application Version Python 3.9 NetBox 3.4.7 GitLab 14.1.0"},{"location":"#installation","title":"Installation","text":"<ol> <li>Clone this repository and create a virtual environment. <pre><code>git clone https://github.com/kagarcia1618/Network-Config-Tracker.git\ncd network-config-tracker\npython3.9 -m venv venv\nsource venv/bin/activate\n</code></pre></li> <li>Install the requirements. <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Create a new directory named private inside the cloned git repository directory. <pre><code>mkdir private\n</code></pre></li> <li> <p>Prepare the following parameter details:</p> <ul> <li>Username - to be used to access and get the running configuration of the network devices. <pre><code>admin\n</code></pre></li> <li>Password - to be used to access and get the running configuration of the network devices. <pre><code>password\n</code></pre></li> <li>NetBox URL - to be used identify the location of local netbox installation. <pre><code>https://&lt;hostname | ipv4 address&gt;\n</code></pre></li> <li>NetBox API Token - to be used to access the NetBox URL API and get the list of network devices to be monitored. <pre><code>&lt;api token&gt;\n</code></pre></li> <li>Gitlab URL - to be used identify the location of local gitlab installation. <pre><code>https://&lt;hostname | ipv4 address&gt;\n</code></pre></li> <li>Gitlab Project Name - to be used to store and monitor the network devices running configuration. <pre><code>kenneth/dev-config/tracker\n</code></pre> <p>Note: New folder named <code>configs</code> will be created inside the gitlab project for storing the devices running configuration.</p> </li> <li>Gitlab Project API Token - to be used to access the gitlab project via API. <pre><code>&lt;api token&gt;\n</code></pre></li> </ul> </li> <li> <p>Generate the encrypted device and application credentials by running <code>credentials.py</code> python script. The script will generate your secret key in the private folder together with the encrypted text file for device and application login access.  <pre><code>python credentials.py\n</code></pre></p> </li> <li> <p>Create a custom field named <code>Last Config Change</code> with <code>date</code> as type and assign it to <code>dcim | device</code>. This will be used by this tool to update the last recorded configuration change for a device.</p> <p>Note: This tool will also update the device <code>status</code> in Netbox based on the result of fetching the device running configuration from the actual device.</p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<ol> <li> <p>Execute the config-tracker.py python script.</p> <pre><code>python config-tracker.py\n</code></pre> <p>Note: If you are using linux environment, you may configure a cronjob to regularly execute this job on your preferred time interval. Sample script below will execute the script every 10 minutes and store output logs to a text file.</p> <pre><code>crontab -e\n*/10 * * * * cd ~/network-config-tracker/ &amp;&amp; venv/bin/python config-tracker.py  &gt;&gt; logs/access_logs.txt\n</code></pre> </li> </ol>"},{"location":"logicflow/","title":"Logic Flow","text":"<p>Sample logic flow for simulated environment with R1 and SW1 as managed network devices.</p> <p></p> <pre><code>sequenceDiagram\n  participant Network Admin\n  participant R1\n  participant SW1\n  participant Python Script\n  participant NetBox\n  participant Gitlab\n  autonumber\n  Python Script-&gt;&gt;NetBox: Fetch the record of network devices via API using pynetbox\n  NetBox--&gt;&gt;Python Script: Return the list of network devices - [ R1(IOS-XR), SW1(NXOS) ]\n  par\n    Python Script-&gt;&gt;R1: Fetch the running configuration of R1 via SSH using Napalm\n    R1--&gt;&gt;Python Script: Return the device's running configuration\n    Python Script-&gt;&gt;Gitlab: Fetch R1's running configuration record via API\n    Python Script--&gt;&gt;Python Script: Compare R1's running configuration from network device and gitlab record\n    Python Script-&gt;&gt;Gitlab: Commit the new running configuration if diff is found\n    Python Script-&gt;&gt;NetBox: Update NetBox record for R1's last config change date\n    Gitlab-&gt;&gt;Network Admin: Email Network Admin with the config change details of R1\n  and\n    Python Script-&gt;&gt;SW1: Fetch the running configuration of SW1 via API using NX-API\n    SW1--&gt;&gt;Python Script: Return the device's running configuration\n    Python Script-&gt;&gt;Gitlab: Fetch SW1's running configuration record via API\n    Python Script--&gt;&gt;Python Script: Compare SW1's running configuration from network device and gitlab record\n    Python Script-&gt;&gt;Gitlab: Commit the new running configuration if diff is found\n    Python Script-&gt;&gt;NetBox: Update NetBox record for SW1's last config change date\n    Gitlab-&gt;&gt;Network Admin: Email Network Admin with the config change details of SW1\n  end</code></pre>"}]}